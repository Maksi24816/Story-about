let LocationSectionCell = [];
let DivideLocationCell = [];
let ActLocationCell = [];
let XLocSectionStart = 35,YLocSectionStart = 25;

let TFWorldCell = false;

const CreateLocation = {
    Controler (Num) {
        if(Num === 1){CreateLocation.Divide();}

        for (let x = -1; x < 2; x++) {
            for (let y = -1; y < 2; y++) {
                if(ActLocationCell[XLocSectionStart+x][YLocSectionStart+y] === 0){
                    console.log(XLocSectionStart+x,YLocSectionStart+y)
                    ccX = XLocSectionStart+x, ccY = YLocSectionStart+y;
                    if(ActLocationCell[ccX][ccY] === 0){
                        CreateLocation.Create(ccX,ccY);
                        for (let q = 0; q < 4; q++) {
                            CreateLocation.Smoothing(ccX,ccY);
                            CreateLocation.Neighboring(ccX,ccY);  
                        }
                    }
    
                    Objects.Controler(ccX,ccY);
    
                    ActLocationCell[XLocSectionStart+x][YLocSectionStart+y] = 1;
                }
            }
        }
        
        LocationRendering.Cell(Num)
    },

    Divide () {
        Arr = [];
        ArrAct = [];
        ArrSec = [];
        for (let x = 0; x < ArrLocation.length/3; x++) {
            Arr1 = [];
            ArrAct1 = [];
            ArrSec1 = [];
            for (let y = 0; y < ArrLocation[0].length/3; y++) {
                Arr2 = [];
                ArrAct1[ArrAct1.length] = 0;
                ArrSec1[ArrSec1.length] = [];
                for (let x1 = 0; x1 < 3; x1++) {
                    Arr3 = [];
                    for (let y1 = 0; y1 < 3; y1++) {
                        Arr3[y1] = ArrLocation[x*3+x1][y*3+y1];
                    }
                    Arr2[x1] = Arr3;
                }
                Arr1[y] = Arr2;
            }
            Arr[x] = Arr1;
            ArrAct[x] = ArrAct1;
            ArrSec[x] = ArrSec1;
        }
        DivideLocationCell = Arr;
        ActLocationCell = ArrAct;
        LocationSectionCell = ArrSec;
    },

    Create (X,Y) {
        for (let x = 0; x < 27; x++) {
            LocationSectionCell[X][Y][x] = [];
        }

        for (let x = 0; x < 3; x++) {
            for (let y = 0; y < 3; y++) {
                Arr = [];
                //console.log(DivideLocationCell[X][Y][x][y][0])
                for (let x1 = 0; x1 < 9; x1++) {
                    for (let y1 = 0; y1 < 9; y1++) {  
                        LocationSectionCell[X][Y][x*9+x1][y*9+y1] = CreateLocation.Transition(DivideLocationCell[X][Y][x][y],x,y,x1,y1);
                        LocationSectionCell[X][Y][x*9+x1][y*9+y1][0][2] = 0;
                    }
                }
            }
        } 
        //console.log(LocationSectionCell[X][Y])
    },

    Transition (AL,x,y,x1,y1){
        Res = LocCellTransition[AL[0][2]][y1][x1];
        //console.log(AL[0][0])
        ctArr = AL.slice();

        Rand = Math.random();

        if(Res[0] >= Rand){
            if(ctArr[0][1][0] !== null){
                ctArr[0] = [ctArr[0][1][0],[ctArr[0][1][0],ctArr[0][1][0],ctArr[0][1][2]],0,ctArr[0][3]]
            }
        } else {
            ctArr[0] = [ctArr[0][0],[ctArr[0][1][0],ctArr[0][1][1],ctArr[0][1][2]],0,ctArr[0][3]];
        }
        return ctArr
    },

    Smoothing (X,Y) {
        LSC = LocationSectionCell[X][Y];
        for(let x = 1 ; x < 26; x++){
            for(let y = 1 ; y < 26; y++){
                LocCell = LSC[x][y][0][0];
                CreateLocation.SmoothingCount(x,y,LocCell,X,Y);
            }
        }
    },

    SmoothingCount (X,Y,Num,GX,GY) {
        gscNum = 0;
        You = null;

        for(let x = X-1 ; x < X+2; x++){
            for(let y = Y-1 ; y < Y+2; y++){
                if(LocationSectionCell[GX][GY][x][y][0][0] === Num){gscNum++}
                else {You = LocationSectionCell[GX][GY][x][y][0][0]}
            }
        }

        if(gscNum > 4){LocationSectionCell[GX][GY][X][Y][0][0] = Num;}
        else{LocationSectionCell[GX][GY][X][Y][0][0] = You;}
    },

    Neighboring (X,Y) {
        for(let x = 0 ; x < 27; x++){
            for(let y = 0 ; y < 27; y++){
                CreateLocation.NeighboringCount(x,y,X,Y);
            }
        }
    },

    NeighboringCount (X,Y,GX,GY) {
        if(X != 0 && X != 26){
            if(Y != 0 && Y != 26){
                neighboringCell = null;
                Arr21 = [];
                for(let x = -1 ; x < +2; x++){
                    Arr22 = [];
                    for(let y = -1 ; y < +2; y++){
                        TF = false;
        
                        CCView = ContactCView[LocationSectionCell[GX][GY][X][Y][0][0]];
                        for(let p = 0; p < CCView.length; p++){
                            if(LocationSectionCell[GX][GY][X+x][Y+y][0][0] === CCView[p][0]){TF = true; neighboringCell = p;}
                        }
                        if(TF == true){Arr22[y+1] = 1;TFWorldCell = true} else {Arr22[y+1] = 0;}
                    }
                    Arr21[x+1] = Arr22;
                }
                
                if(TFWorldCell == true){
                    CCV = ContactCView[LocationSectionCell[GX][GY][X][Y][0][0]][neighboringCell];
                    LocationSectionCell[GX][GY][X][Y] = CreateLocation.TransitionCView(Arr21,LocationSectionCell[GX][GY][X][Y][0][0],[CCV[0],CCV[1],neighboringCell],LocationSectionCell[GX][GY][X][Y][0][3])
                } else {CreateLocation.El_NoLogic(X,Y,GX,GY);}
        
                TFWorldCell = false;
            } else {CreateLocation.El_NoLogic(X,Y,GX,GY);}
        } else {CreateLocation.El_NoLogic(X,Y,GX,GY);}
    },

    El_NoLogic (X,Y,GX,GY) {
        CCV = ContactCView[LocationSectionCell[GX][GY][X][Y][0][0]][0];
        LocationSectionCell[GX][GY][X][Y][0] = [LocationSectionCell[GX][GY][X][Y][0][0],[CCV[0],CCV[1],0],0,LocationSectionCell[GX][GY][X][Y][0][3]];
        LocationSectionCell[GX][GY][X][Y][1] = [[null,0,0],0];
    },

    TransitionCView (Arr,WorldCView,Neighboring,BioCell) {
        Go = [[WorldCView,Neighboring,0,BioCell],[[null,0,0],0]];
        UP = 0;
        
        if(Arr[0][1] == 1){if(Arr[2][1] == 1){Go[0][2] = 0;UP++}}
        if(Arr[2][1] == 1){if(Arr[0][1] == 1){Go[0][2] = 0;UP++}}
        if(Arr[1][0] == 1){if(Arr[1][2] == 1){Go[0][2] = 0;UP++}}
        if(Arr[1][2] == 1){if(Arr[1][0] == 1){Go[0][2] = 0;UP++}}

        if(UP == 0){
            if(Arr[0][1] == 1){if(Arr[1][2] == 1){Go[0][2] = 12;UP++}}
            if(Arr[1][2] == 1){if(Arr[2][1] == 1){Go[0][2] = 11;UP++}}
            if(Arr[2][1] == 1){if(Arr[1][0] == 1){Go[0][2] = 10;UP++}}
            if(Arr[1][0] == 1){if(Arr[0][1] == 1){Go[0][2] = 9;UP++}}
        }

        if(UP == 0){
            if(Arr[0][1]){Go[0][2] = 5;UP++}
            if(Arr[1][2]){Go[0][2] = 6;UP++}
            if(Arr[2][1]){Go[0][2] = 7;UP++}
            if(Arr[1][0]){Go[0][2] = 8;UP++}
        }
        
        if(UP == 0){
            if(Arr[0][2]){Go[0][2] = 4;UP++}
            if(Arr[2][2]){Go[0][2] = 3;UP++}
            if(Arr[2][0]){Go[0][2] = 2;UP++}
            if(Arr[0][0]){Go[0][2] = 1;UP++}
        }

        return Go;
    }
}

const LocCellTransition = [
    [
        [[0],[0],[.0],[.0],[.0],[.0],[.0],[.0],[.0]],
        [[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0]],
        [[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0]],
        [[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0]],
        [[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0]],
        [[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0]],
        [[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0]],
        [[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0]],
        [[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0],[.0]]
    ],
    [
        [[1],[1],[.5],[1],[1],[0],[0],[0],[0]],
        [[1],[.5],[.5],[.5],[.5],[.5],[.5],[.5],[0]],
        [[.5],[.5],[.5],[.5],[.5],[.5],[.5],[.5],[.5]],
        [[1],[.5],[.5],[.5],[.5],[.5],[.5],[0],[.5]],
        [[1],[1],[.5],[.5],[.5],[.5],[0],[0],[0]],
        [[0],[.5],[.5],[.5],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]]
    ],
    [
        [[0],[0],[0],[0],[1],[1],[.5],[1],[1]],
        [[0],[0],[0],[.5],[.5],[.5],[.5],[.5],[1]],
        [[0],[0],[0],[.5],[.5],[.5],[.5],[.5],[.5]],
        [[0],[0],[0],[.5],[.5],[.5],[.5],[.5],[1]],
        [[0],[0],[0],[0],[.5],[.5],[.5],[.5],[1]],
        [[0],[0],[0],[0],[0],[.5],[.5],[.5],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]]
    ],
    [
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[.5],[.5],[.5],[0]],
        [[0],[0],[0],[0],[.5],[.5],[.5],[.5],[1]],
        [[0],[0],[0],[.5],[.5],[.5],[.5],[.5],[1]],
        [[0],[0],[0],[.5],[.5],[.5],[.5],[.5],[.5]],
        [[0],[0],[0],[.5],[.5],[.5],[.5],[.5],[1]],
        [[0],[0],[0],[0],[1],[1],[.5],[1],[1]]
    ],
    [
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[.5],[.5],[.5],[0],[0],[0],[0],[0]],
        [[1],[.5],[.5],[.5],[.5],[0],[0],[0],[0]],
        [[1],[.5],[.5],[.5],[.5],[.5],[0],[0],[0]],
        [[.5],[.5],[.5],[.5],[.5],[.5],[0],[0],[0]],
        [[1],[.5],[.5],[.5],[.5],[.5],[0],[0],[0]],
        [[1],[1],[.5],[1],[1],[0],[0],[0],[0]]
    ],
    [
        [[1],[1],[1],[1],[1],[0],[0],[0],[0]],
        [[1],[1],[1],[1],[.5],[.5],[0],[0],[0]],
        [[1],[1],[1],[.5],[.5],[.5],[.5],[0],[0]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[0],[0]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[0],[0]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[0],[0]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[0],[0]],
        [[1],[1],[1],[.5],[.5],[.5],[0],[0],[0]],
        [[1],[1],[1],[1],[1],[0],[0],[0],[0]]
    ],
    [
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]],
        [[0],[0],[0],[.5],[.5],[.5],[.5],[0],[0]],
        [[0],[0],[.5],[.5],[.5],[.5],[.5],[.5],[0]],
        [[0],[.5],[.5],[.5],[.5],[.5],[.5],[.5],[0]],
        [[1],[.5],[.5],[.5],[.5],[.5],[.5],[.5],[1]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[1],[1]],
        [[1],[1],[1],[.5],[.5],[.5],[1],[1],[1]],
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]]
    ],
    [
        [[0],[0],[0],[0],[1],[1],[1],[1],[1]],
        [[0],[0],[0],[.5],[.5],[1],[1],[1],[1]],
        [[0],[0],[.5],[.5],[.5],[.5],[1],[1],[1]],
        [[0],[0],[.5],[.5],[.5],[.5],[.5],[1],[1]],
        [[0],[0],[.5],[.5],[.5],[.5],[.5],[1],[1]],
        [[0],[0],[.5],[.5],[.5],[.5],[.5],[1],[1]],
        [[0],[0],[.5],[.5],[.5],[.5],[1],[1],[1]],
        [[0],[0],[0],[.5],[.5],[1],[1],[1],[1]],
        [[0],[0],[0],[0],[1],[1],[1],[1],[1]]
    ],
    [
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[.5],[.5],[.5],[1],[1],[1]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[1],[1]],
        [[1],[.5],[.5],[.5],[.5],[.5],[.5],[.5],[1]],
        [[0],[.5],[.5],[.5],[.5],[.5],[.5],[.5],[0]],
        [[0],[0],[.5],[.5],[.5],[.5],[.5],[0],[0]],
        [[0],[0],[0],[.5],[.5],[.5],[0],[0],[0]],
        [[0],[0],[0],[0],[0],[0],[0],[0],[0]]
    ],
    [
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[1],[.5],[.5],[1],[1],[1]],
        [[1],[1],[1],[.5],[.5],[.5],[.5],[1],[1]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[.5],[1]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[.5],[0]],
        [[1],[1],[1],[.5],[.5],[.5],[.5],[0],[0]],
        [[1],[1],[1],[1],[.5],[.5],[0],[0],[0]],
        [[1],[1],[1],[1],[1],[0],[0],[0],[0]]
    ],
    [
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[.5],[.5],[1],[1],[1],[1]],
        [[1],[1],[.5],[.5],[.5],[.5],[1],[1],[1]],
        [[1],[.5],[.5],[.5],[.5],[.5],[.5],[1],[1]],
        [[0],[.5],[.5],[.5],[.5],[.5],[.5],[1],[1]],
        [[0],[0],[.5],[.5],[.5],[.5],[1],[1],[1]],
        [[0],[0],[.5],[0],[.5],[1],[1],[1],[1]],
        [[0],[0],[0],[0],[1],[1],[1],[1],[1]]
    ],
    [
        [[0],[0],[0],[0],[1],[1],[1],[1],[1]],
        [[0],[0],[0],[.5],[.5],[1],[1],[1],[1]],
        [[0],[0],[.5],[.5],[.5],[.5],[1],[1],[1]],
        [[0],[.5],[.5],[.5],[.5],[.5],[.5],[1],[1]],
        [[1],[.5],[.5],[.5],[.5],[.5],[1],[1],[1]],
        [[1],[1],[.5],[.5],[.5],[1],[1],[1],[1]],
        [[1],[1],[1],[.5],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]]
    ],
    [
        [[1],[1],[1],[1],[1],[0],[0],[0],[0]],
        [[1],[1],[1],[1],[.5],[.5],[0],[0],[0]],
        [[1],[1],[1],[.5],[.5],[.5],[.5],[0],[0]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[.5],[0]],
        [[1],[1],[.5],[.5],[.5],[.5],[.5],[.5],[1]],
        [[1],[1],[1],[.5],[.5],[.5],[.5],[1],[1]],
        [[1],[1],[1],[1],[.5],[.5],[1],[1],[1]],
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]],
        [[1],[1],[1],[1],[1],[1],[1],[1],[1]]
    ]
]
